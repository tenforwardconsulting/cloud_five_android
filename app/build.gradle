apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'dagger.hilt.android.plugin'

def keystorePropertiesFile = rootProject.file("release-signing.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

if (file('my.gradle').exists()) {
    apply from: 'my.gradle'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.cloudfiveapp.dev"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Level options: BASIC, HEADERS, BODY, NONE
        buildConfigField 'okhttp3.logging.HttpLoggingInterceptor.Level', 'HTTP_LOG_LEVEL', 'okhttp3.logging.HttpLoggingInterceptor.Level.BASIC'

        buildConfigField 'String', 'CLOUDFIVE_DEV', '"true"'
        buildConfigField 'String', 'BASE_URL', '"https://cloudfive.10fw.net"'
    }

    if (keystorePropertiesFile.exists()) {
        signingConfigs {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "default"
}

kapt {
    correctErrorTypes true
}

dependencies {
    // AndroidX
    implementation "androidx.activity:activity-compose:1.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07"
    implementation "androidx.navigation:navigation-compose:2.4.0-alpha06"

    // Dagger Hilt - Dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    androidTestImplementation  "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-compiler:$hilt_version"

    implementation "androidx.hilt:hilt-navigation-compose:1.0.0-alpha03"

    // Compose - Declarative UI framework
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"

    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"

    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // Accompanist - Compose helper library
    def accompanist_version = '0.16.1'
    implementation "com.google.accompanist:accompanist-insets:$accompanist_version"
    implementation "com.google.accompanist:accompanist-insets-ui:$accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"

    // Push
    implementation "com.google.firebase:firebase-core:19.0.0"
    implementation "com.google.firebase:firebase-messaging:22.0.0"
    implementation "com.cloudfiveapp:push-android:1.2.0"

    // Retrofit - HTTP APIs as interfaces
    def retrofit_version = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    // NetworkResponseAdapter - Call adapter to handle errors as state
    implementation "com.github.haroldadmin:NetworkResponseAdapter:4.2.2"

    // OkHttp - HTTP network library
    def okhttp_version = '4.9.1'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Moshi - JSON Parsing
    def moshi_version = "1.12.0"
    implementation "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // Logs
    implementation "com.jakewharton.timber:timber:5.0.1"
}
